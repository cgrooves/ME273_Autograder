{"files":[{"id":"5d3d9dcc-c85e-46a5-8d3f-a86e1cb5ce7c","name":"Test","type":"server_js","source":"// ----------------------------------------------------------------------------------\n// File: Test.gs\n// Author: Caleb Groves\n// Date: 24 August 2018\n//\n// Purpose: This function sends out a few test emails using the Google Drive account and a .csv\n// file named \u0027ME273LabFeedback.csv\u0027 that should be uploaded to your Google Drive.\n//\n// Inputs: The .csv containing the grades and feedback you want to send out should be\n// uploaded to the Google Drive, and should be named \u0027ME273LabFeedback.csv\u0027. When the\n// program runs, it searches for all files in the Drive that are named \u0027ME273LabFeedback.csv\u0027,\n// uses the newest one in this program and deletes all of the others. The file that is\n// used is also ultimately deleted from the Google Drive.\n//\n// The variables defined in *** TESTING VARIABLES *** can be changed so that the test emails\n// are sent to a different email, or to do a different number of test emails or start\n// on a different row.\n//\n// Outputs: This function will send out grades and feedback to each student in the\n// .csv file in the testing range specified in *** TESTING VARIABLES ***.\n//\n// NOTES:\n//   1. Emails will be sent out until this Google account\u0027s daily email quota limit\n// has been reached (100 normally for a 24-hour period), at which point no more emails\n// will be sent out.\n//\n//   2. This function works hand-in-hand with configAutograder.m. Changes in the \n// column assignment section of configAutograder.m will need to be made in this function\n// as well, in the *** COLUMN ASSIGNMENTS *** section.\n//\n//   3. Any rows of students in the .csv read in by this function will be skipped if\n// their feedback flag is \u00270\u0027 or \u00272\u0027.\n// ----------------------------------------------------------------------------------\n\nfunction gradingFeedbackTest() {\n  // *** TESTING VARIABLES ***\n  var testEmail \u003d \u0027d.cook@byu.edu\u0027;\n  var startTestStudent \u003d 2;\n  var numTestStudents \u003d 8;\n  // *** END TESTING VARIABLES ***\n  \n  // get feedback csv\u0027s\n  var feedbackFiles \u003d DriveApp.getFilesByName(\"ME273LabFeedback.csv\");\n  \n  try {\n    // if there is no matching file, this line will crash the program\n    var fileNew \u003d feedbackFiles.next(); \n  }\n  catch (e) {\n    console.error(\u0027No feedback .csv file found (must be named ME273LabFeedback.csv).\u0027);\n    return;\n  }\n  \n  // get the most recent one\n  while(feedbackFiles.hasNext()) {\n    var file \u003d feedbackFiles.next();\n    \n    if (file.getLastUpdated() \u003e fileNew.getLastUpdated()) {\n      fileNew \u003d file;\n      file.setTrashed(true);\n    }\n  }\n  \n  // setup spreadsheet - because Google can\u0027t operate on the CSV directly\n  var ssNew \u003d SpreadsheetApp.create(\"SendLabFeedback\");\n  var csvData \u003d Utilities.parseCsv(fileNew.getBlob().getDataAsString());\n  var sheet \u003d ssNew.getSheets()[0];\n  sheet.getRange(1, 1, csvData.length, csvData[0].length).setValues(csvData);\n  var dataRange \u003d sheet.getDataRange();\n  \n  // get data\n  var data \u003d dataRange.getValues();\n  \n  // *** COLUMN ASSIGNMENTS ***\n  // Front-of-the-file fields\n  var COURSEID \u003d 0;\n  var LASTNAME \u003d 1;\n  var FIRSTNAME \u003d 2;\n  var SECTIONNUMBER \u003d 4;\n  var LABSCORE \u003d 5;\n  var FEEDBACKFLAG \u003d 6;\n  var FIRSTDEADLINE \u003d 7;\n  var FINALDEADLINE \u003d 8;\n  // Back-of-the-file fields\n  var EMAIL \u003d 1;\n  \n  // Lab part constants\n  var PARTSTART \u003d 9;\n  var PARTLENGTH_FRONT \u003d 6;\n  var PARTLENGTH_BACK \u003d 3;\n  \n  var LATE \u003d 1;\n  var PARTSCORE \u003d 2;\n  var CODESCORE \u003d 3;\n  var HEADERSCORE \u003d 4;\n  var COMMENTSCORE \u003d 5;\n  \n  var CODEFEEDBACK \u003d 0;\n  var HEADERFEEDBACK \u003d 1;\n  var COMMENTFEEDBACK \u003d 2;\n  // *** END COLUMN ASSIGNMENTS ***\n  \n  // parse out the lab number\n  var labNumber \u003d data[0][LABSCORE][3]; // get 4th number \n  \n  \n  // For each student\n  for (var i \u003d startTestStudent; i \u003c (startTestStudent + numTestStudents); i++) // test line\n  {    \n    var row \u003d data[i];\n    var n \u003d row.length;\n    var p \u003d (n - (PARTSTART + 1))/(PARTLENGTH_FRONT + PARTLENGTH_BACK);\n    \n    var courseID \u003d row[COURSEID];\n    var lastName \u003d row[LASTNAME];\n    var firstName \u003d row[FIRSTNAME];\n    var labScore \u003d Math.round(row[LABSCORE]*100);\n    var feedbackFlag \u003d parseInt(row[FEEDBACKFLAG])\n    var email \u003d row[row.length - EMAIL];\n    \n    if (feedbackFlag !\u003d 1) {\n      continue;\n    }\n        \n    // get info for each assignment\n    var assignmentBreakdown \u003d \u0027\u0027;\n    \n    for (var j \u003d 1; j \u003c\u003d p; j++)\n    {\n      var c \u003d PARTSTART + (j-1)*PARTLENGTH_FRONT;\n      \n      // get lab part name and scores\n      var labPartName \u003d row[c];\n      var late \u003d row[c + LATE];\n      var labPartScore \u003d Math.round(row[c + PARTSCORE]*100);\n      var codeScore \u003d Math.round(row[c + CODESCORE]*100);\n      var headerScore \u003d Math.round(row[c+HEADERSCORE]*100);\n      var commentScore \u003d Math.round(row[c+COMMENTSCORE]*100);\n      \n      // get the right index for lab part feedback\n      c \u003d n - (p - (j-1))*PARTLENGTH_BACK - 1;\n      \n      // get lab part feedback\n      var codeFeedback \u003d row[c + CODEFEEDBACK];\n      var headerFeedback \u003d row[c + HEADERFEEDBACK];\n      var commentFeedback \u003d row[c + COMMENTFEEDBACK];\n      \n      // formulate feedback string\n      var line1 \u003d labPartName + \u0027 Assignment ---------------------------------\\n\u0027;\n      var line2 \u003d \u0027Total Score:\\t\u0027 + labPartScore + \u0027 % \\n\u0027;\n      var line3 \u003d \u0027Code Score:\\t\u0027 + codeScore + \u0027 % \\n\u0027;\n      var line4 \u003d \u0027Code Feedback: \u0027 + codeFeedback + \u0027\\n\u0027;\n      var line5 \u003d \u0027Header Score:\\t\u0027 + headerScore + \u0027 % \\n\u0027;\n      var line6 \u003d \u0027Header Feedback: \u0027 + headerFeedback + \u0027\\n\u0027;\n      var line7 \u003d \u0027Comment Score:\\t\u0027 + commentScore + \u0027 % \\n\u0027;\n      var line8 \u003d \u0027Comment Feedback: \u0027 + commentFeedback + \u0027\\n\u0027;\n      var line9 \u003d \u0027---------------------------------------------------------------\\n\\n\u0027;\n      \n      // Add in late notice if applicable\n      if (late \u003d\u003d 1){\n        line8 +\u003d \u0027Note: Based on the date of your submission, this part of the lab was graded as \u0027 + \n          \u0027resubmission and is subject to the regrading policy.\\n\u0027;\n      }\n      \n      assignmentBreakdown +\u003d line1 + line2 + line3 + line4 + line5 + line6 + line7 + line8 + line9;\n    }\n    \n    // hook together text\n    var opener \u003d firstName + \u0027 \u0027 + lastName + \u0027:\\n\\n\u0027;\n    var intro \u003d \u0027The following feedback was automatically generated from your recent lab \u0027 + labNumber + \u0027 submission. \\n\\n\u0027;\n    \n    var line1 \u003d \u0027///////////////////*** Lab \u0027 + labNumber + \u0027 Breakdown ***//////////////////\\n\\n\u0027;\n    var line2 \u003d \u0027Overall Lab \u0027 + labNumber + \u0027 Score:\\t\u0027 + labScore + \u0027 % \\n\\n\u0027;    \n    var line3 \u003d \u0027**************Assignment Breakdown*****************\\n\u0027;\n    var line4 \u003d assignmentBreakdown;\n    \n    var ending \u003d \u0027**If you have any questions on your assignment grade, please go whine to your mom, I don\\\u0027t want to hear it.**\u0027;    \n    \n    var text \u003d opener + intro + line1 + line2 + line3 + line4 + ending;\n    var subject \u003d \u0027ME 273 Lab \u0027 + labNumber + \u0027 Grade\u0027;\n    \n    // send email\n    MailApp.sendEmail(testEmail,subject,text); // test line    \n\n  }\n  \n  // delete files\n  fileNew.setTrashed(true);\n  var ssID \u003d ssNew.getId();\n  var ssFile \u003d DriveApp.getFileById(ssID);\n  ssFile.setTrashed(true);\n}\n"},{"id":"5fef6f97-66ae-4802-b34f-32e38adfa29f","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Denver\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"executionApi\": {\n    \"access\": \"MYSELF\"\n  }\n}"},{"id":"8c74bc13-bba3-4191-ac34-f99e073aecdc","name":"Main","type":"server_js","source":"// ----------------------------------------------------------------------------------\n// File: Main.gs\n// Author: Caleb Groves\n// Date: 24 August 2018\n//\n// Purpose: This function sends out emails using the Google Drive account and a .csv\n// file named \u0027ME273LabFeedback.csv\u0027 that should be uploaded to your Google Drive.\n//\n// Inputs: The .csv containing the grades and feedback you want to send out should be\n// uploaded to the Google Drive, and should be named \u0027ME273LabFeedback.csv\u0027. When the\n// program runs, it searches for all files in the Drive that are named \u0027ME273LabFeedback.csv\u0027,\n// uses the newest one in this program and deletes all of the others. The file that is\n// used is also ultimately deleted from the Google Drive.\n//\n// Outputs: This function will send out grades and feedback to each student in the\n// .csv file.\n//\n// NOTES:\n//   1. Emails will be sent out until this Google account\u0027s daily email quota limit\n// has been reached (100 normally for a 24-hour period), at which point no more emails\n// will be sent out.\n//\n//   2. This function works hand-in-hand with configAutograder.m. Changes in the \n// column assignment section of configAutograder.m will need to be made in this function\n// as well, in the *** COLUMN ASSIGNMENTS *** section.\n// ----------------------------------------------------------------------------------\n\nfunction gradingFeedback() {\n  \n  // get feedback csv\u0027s\n  var feedbackFiles \u003d DriveApp.getFilesByName(\"ME273LabFeedback.csv\");\n  \n  try {\n    // if there is no matching file, this line will crash the program\n    var fileNew \u003d feedbackFiles.next(); \n  }\n  catch (e) {\n    console.error(\u0027No feedback .csv file found (must be named ME273LabFeedback.csv).\u0027);\n    return;\n  }\n  \n  // get the most recent one\n  while(feedbackFiles.hasNext()) {\n    var file \u003d feedbackFiles.next();\n    \n    if (file.getLastUpdated() \u003e fileNew.getLastUpdated()) {\n      fileNew \u003d file;\n      file.setTrashed(true);\n    }\n  }\n  \n  // setup spreadsheet - because Google can\u0027t operate on the CSV directly\n  var ssNew \u003d SpreadsheetApp.create(\"SendLabFeedback\");\n  var csvData \u003d Utilities.parseCsv(fileNew.getBlob().getDataAsString());\n  var sheet \u003d ssNew.getSheets()[0];\n  sheet.getRange(1, 1, csvData.length, csvData[0].length).setValues(csvData);\n  var dataRange \u003d sheet.getDataRange();\n  \n  // get data\n  var data \u003d dataRange.getValues();\n  \n  \n  // *** COLUMN ASSIGNMENTS ***\n  // Front-of-the-file fields\n  var COURSEID \u003d 0;\n  var LASTNAME \u003d 1;\n  var FIRSTNAME \u003d 2;\n  var SECTIONNUMBER \u003d 4;\n  var LABSCORE \u003d 5;\n  var FEEDBACKFLAG \u003d 6;\n  var FIRSTDEADLINE \u003d 7;\n  var FINALDEADLINE \u003d 8;\n  // Back-of-the-file fields\n  var EMAIL \u003d 1;\n  \n  // Lab part constants\n  var PARTSTART \u003d 9;\n  var PARTLENGTH_FRONT \u003d 6;\n  var PARTLENGTH_BACK \u003d 3;\n  \n  var LATE \u003d 1;\n  var PARTSCORE \u003d 2;\n  var CODESCORE \u003d 3;\n  var HEADERSCORE \u003d 4;\n  var COMMENTSCORE \u003d 5;\n  \n  var CODEFEEDBACK \u003d 0;\n  var HEADERFEEDBACK \u003d 1;\n  var COMMENTFEEDBACK \u003d 2;\n  // *** END COLUMN ASSIGNMENTS ***\n  \n  \n  // parse out the lab number\n  var labNumber \u003d data[0][LABSCORE][3]; // get 4th number \n  \n  \n  // For each student\n  for (var i \u003d 1; i \u003c data.length; i++)\n  {    \n    var row \u003d data[i];\n    var n \u003d row.length;\n    var p \u003d (n - (PARTSTART + 1))/(PARTLENGTH_FRONT + PARTLENGTH_BACK);\n    \n    var courseID \u003d row[COURSEID];\n    var lastName \u003d row[LASTNAME];\n    var firstName \u003d row[FIRSTNAME];\n    var labScore \u003d Math.round(row[LABSCORE]*100);\n    var feedbackFlag \u003d parseInt(row[FEEDBACKFLAG])\n    var email \u003d row[row.length - EMAIL];\n    \n    if (feedbackFlag !\u003d 1) {\n      continue;\n    }\n        \n    // get info for each assignment\n    var assignmentBreakdown \u003d \u0027\u0027;\n    \n    for (var j \u003d 1; j \u003c\u003d p; j++)\n    {\n      var c \u003d PARTSTART + (j-1)*PARTLENGTH_FRONT;\n      \n      // get lab part name and scores\n      var labPartName \u003d row[c];\n      var late \u003d row[c + LATE];\n      var labPartScore \u003d Math.round(row[c + PARTSCORE]*100);\n      var codeScore \u003d Math.round(row[c + CODESCORE]*100);\n      var headerScore \u003d Math.round(row[c+HEADERSCORE]*100);\n      var commentScore \u003d Math.round(row[c+COMMENTSCORE]*100);\n      \n      // get the right index for lab part feedback\n      c \u003d n - (p - (j-1))*PARTLENGTH_BACK - 1;\n      \n      // get lab part feedback\n      var codeFeedback \u003d row[c + CODEFEEDBACK];\n      var headerFeedback \u003d row[c + HEADERFEEDBACK];\n      var commentFeedback \u003d row[c + COMMENTFEEDBACK];\n      \n      // formulate feedback string\n      var line1 \u003d labPartName + \u0027 Assignment ---------------------------------\\n\u0027;\n      var line2 \u003d \u0027Total Score:\\t\u0027 + labPartScore + \u0027 % \\n\u0027;\n      var line3 \u003d \u0027Code Score:\\t\u0027 + codeScore + \u0027 % \\n\u0027;\n      var line4 \u003d \u0027Code Feedback: \u0027 + codeFeedback + \u0027\\n\u0027;\n      var line5 \u003d \u0027Header Score:\\t\u0027 + headerScore + \u0027 % \\n\u0027;\n      var line6 \u003d \u0027Header Feedback: \u0027 + headerFeedback + \u0027\\n\u0027;\n      var line7 \u003d \u0027Comment Score:\\t\u0027 + commentScore + \u0027 % \\n\u0027;\n      var line8 \u003d \u0027Comment Feedback: \u0027 + commentFeedback + \u0027\\n\u0027;\n      var line9 \u003d \u0027---------------------------------------------------------------\\n\\n\u0027;\n      \n      // Add in late notice if applicable\n      if (late \u003d\u003d 1){\n        line8 +\u003d \u0027Note: Based on the date of your submission, this part of the lab was graded as \u0027 + \n          \u0027resubmission and is subject to the regrading policy.\\n\u0027;\n      }\n      \n      assignmentBreakdown +\u003d line1 + line2 + line3 + line4 + line5 + line6 + line7 + line8 + line9;\n    }\n    \n    // hook together text\n    var opener \u003d firstName + \u0027 \u0027 + lastName + \u0027:\\n\\n\u0027;\n    var intro \u003d \u0027The following feedback was automatically generated from your recent lab \u0027 + labNumber + \u0027 submission. \\n\\n\u0027;\n    \n    var line1 \u003d \u0027///////////////////*** Lab \u0027 + labNumber + \u0027 Breakdown ***//////////////////\\n\\n\u0027;\n    var line2 \u003d \u0027Overall Lab \u0027 + labNumber + \u0027 Score:\\t\u0027 + labScore + \u0027 % \\n\\n\u0027;    \n    var line3 \u003d \u0027**************Assignment Breakdown*****************\\n\u0027;\n    var line4 \u003d assignmentBreakdown;\n    \n    var ending \u003d \u0027**If you have any questions on your assignment grade, please go whine to your mom, I don\\\u0027t want to hear it.**\u0027;    \n    \n    var text \u003d opener + intro + line1 + line2 + line3 + line4 + ending;\n    var subject \u003d \u0027ME 273 Lab \u0027 + labNumber + \u0027 Grade\u0027;\n    \n    // send email\n    MailApp.sendEmail(email,subject, text);\n    \n\n  }\n  \n  // delete files\n  fileNew.setTrashed(true);\n  var ssID \u003d ssNew.getId();\n  var ssFile \u003d DriveApp.getFileById(ssID);\n  ssFile.setTrashed(true);\n}\n"}]}